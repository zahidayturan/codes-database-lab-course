@model List<DatabaseLabWork5.Models.Student>

@{
    ViewData["Title"] = "Student List";
}

<div class="container mt-2">

        <div class="row align-items-center mt-3">
            <div class="col-auto">
                 <h2>Student List</h2>
            </div>
            <div class="col text-end">
                <a asp-action="Create" class="btn btn-primary">Add New Student</a>
                <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">Back to Home</a>
            </div>
        </div>


    @if (TempData["SuccessMessage"] != null)
    {
            <div class="alert alert-success" role="alert">
            @TempData["SuccessMessage"]
            </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
            <div class="alert alert-danger" role="alert">
            @TempData["ErrorMessage"]
            </div>
    }


    <table class="table table-striped">
        <thead>
            <tr>
                <th>Student ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Department</th>
                <th>Faculty</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in Model)
            {
                    <tr>
                        <td>@student.StudentID</td>
                        <td>
                            <form asp-action="Edit" asp-controller="Student" method="post" id="edit-form-firstname-@student.StudentID" class="d-inline">
                                <input type="hidden" name="id" value="@student.StudentID" />
                                <input type="hidden" name="StudentID" value="@student.StudentID" />
                                <input type="text" name="FirstName" value="@student.FirstName" class="form-control student-firstname" id="student-firstname-@student.StudentID" readonly />
                            </form>
                        </td>
                        <td>
                            <form asp-action="Edit" asp-controller="Student" method="post" id="edit-form-lastname-@student.StudentID" class="d-inline">
                                <input type="hidden" name="id" value="@student.StudentID" />
                                <input type="hidden" name="StudentID" value="@student.StudentID" />
                                <input type="text" name="LastName" value="@student.LastName" class="form-control student-lastname" id="student-lastname-@student.StudentID" readonly />
                            </form>
                        </td>
                        <td>
                            <form asp-action="Edit" asp-controller="Student" method="post" id="edit-form-department-@student.StudentID" class="d-inline">
                                <input type="hidden" name="id" value="@student.StudentID" />
                                <input type="hidden" name="StudentID" value="@student.StudentID" />
                                <select name="DepartmentID" class="form-select department-select" id="department-select-@student.StudentID" disabled>
                                    <option value="@student.DepartmentID" selected>@student.Department?.DepartmentName</option>
                                </select>
                            </form>
                        </td>
                        <td>
                            <form asp-action="Edit" asp-controller="Student" method="post" id="edit-form-faculty-@student.StudentID" class="d-inline">
                                <input type="hidden" name="id" value="@student.StudentID" />
                                <input type="hidden" name="StudentID" value="@student.StudentID" />
                                <select name="FacultyID" class="form-select faculty-select" id="faculty-select-@student.StudentID" disabled>
                                    <option value="@student.Department?.FacultyID" selected>@student.Department?.Faculty?.FacultyName</option>
                                @foreach (var faculty in (SelectList)ViewBag.FacultyList)
                                {
                                    if (faculty.Value != student.Department?.FacultyID.ToString())
                                    {
                                                    <option value="@faculty.Value">@faculty.Text</option>
                                    }
                                }
                                </select>
                            </form>
                        </td>
                        <td>
                            <button type="button" class="btn btn-sm btn-warning edit-btn" data-id="@student.StudentID">Edit</button>
                            <form asp-action="Delete" asp-controller="Student" method="post" class="d-inline delete-form" data-id="@student.StudentID">
                                <input type="hidden" name="id" value="@student.StudentID" />
                                <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                            </form>
                        </td>
                    </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
        <script>
            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', async function () {
                    const studentId = this.getAttribute('data-id');
                    const firstNameInput = document.getElementById(`student-firstname-${studentId}`);
                    const lastNameInput = document.getElementById(`student-lastname-${studentId}`);
                    const facultySelect = document.getElementById(`faculty-select-${studentId}`);
                    const departmentSelect = document.getElementById(`department-select-${studentId}`);
                    const firstNameForm = document.getElementById(`edit-form-firstname-${studentId}`);
                    const lastNameForm = document.getElementById(`edit-form-lastname-${studentId}`);
                    const departmentForm = document.getElementById(`edit-form-department-${studentId}`);
                    const facultyForm = document.getElementById(`edit-form-faculty-${studentId}`);

                    if (this.textContent === 'Edit') {
                        // Enable editing
                        firstNameInput.removeAttribute('readonly');
                        lastNameInput.removeAttribute('readonly');
                        facultySelect.removeAttribute('disabled');
                        departmentSelect.removeAttribute('disabled');
                        firstNameInput.focus();
                        this.textContent = 'Save';
                        this.classList.remove('btn-warning');
                        this.classList.add('btn-success');

                        // Load departments for selected faculty
                        await updateDepartments(facultySelect.value, departmentSelect, studentId);
                    } else {
                        // Validate inputs before submitting
                        if (!firstNameInput.value.trim()) {
                            alert('First name cannot be empty.');
                            return;
                        }
                        if (!lastNameInput.value.trim()) {
                            alert('Last name cannot be empty.');
                            return;
                        }
                        if (!facultySelect.value) {
                            alert('Please select a faculty.');
                            return;
                        }
                        if (!departmentSelect.value) {
                            alert('Please select a department.');
                            return;
                        }

                        // Update hidden inputs in firstNameForm to include all fields
                        const lastNameInputHidden = document.createElement('input');
                        lastNameInputHidden.type = 'hidden';
                        lastNameInputHidden.name = 'LastName';
                        lastNameInputHidden.value = lastNameInput.value;
                        firstNameForm.appendChild(lastNameInputHidden);

                        const departmentIdInput = document.createElement('input');
                        departmentIdInput.type = 'hidden';
                        departmentIdInput.name = 'DepartmentID';
                        departmentIdInput.value = departmentSelect.value;
                        firstNameForm.appendChild(departmentIdInput);

                        console.log(`Submitting form for StudentID: ${studentId}`);
                        firstNameForm.submit();
                    }
                });
            });

            document.querySelectorAll('.faculty-select').forEach(select => {
                select.addEventListener('change', async function () {
                    const studentId = this.id.replace('faculty-select-', '');
                    const departmentSelect = document.getElementById(`department-select-${studentId}`);
                    await updateDepartments(this.value, departmentSelect, studentId);
                });
            });

            async function updateDepartments(facultyId, departmentSelect, studentId) {
                departmentSelect.innerHTML = '<option value="">Select a department</option>';
                if (facultyId) {
                    try {
                        const response = await fetch(`/Department/GetByFaculty?facultyId=${facultyId}`);
                        if (!response.ok) throw new Error('Failed to load departments');
                        const departments = await response.json();
                        departments.forEach(dept => {
                            const option = document.createElement('option');
                            option.value = dept.departmentID;
                            option.textContent = dept.departmentName;
                            departmentSelect.appendChild(option);
                        });
                    } catch (error) {
                        console.error('Error loading departments:', error);
                        departmentSelect.innerHTML = '<option value="">Error loading departments</option>';
                    }
                }
            }

            document.querySelectorAll('.delete-form').forEach(form => {
                form.addEventListener('submit', function (e) {
                    if (!confirm('Are you sure you want to delete this student?')) {
                        e.preventDefault();
                    }
                });
            });
        </script>
}